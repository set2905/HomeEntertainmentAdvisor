@page "/EditReview/{ReviewId}"
@page "/EditReview"
@using Blazored.FluentValidation
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using Markdig.Syntax.Inlines;
@inject IReviewService reviewService
@inject IMediaService mediaService
@inject IRatingService ratingService
@inject ISnackbar snackBar
<PageTitle>Edit review</PageTitle>

<EditForm Model="@review" OnValidSubmit="@SubmitValidForm">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudGrid Justify="Justify.Center">
        <MudItem md="10" xs="12">
            <MudPaper Class="pa-4">
                <MudStack>
                    <MudText Typo="Typo.h4">Edit review </MudText>

                    <MudText>Media: </MudText>
                    <MudAutocomplete T="MediaPiece" @bind-Value="review.Rating.MediaPiece" SearchFuncWithCancel="@SearchMediaPieces"
                                     ToStringFunc="@(e=> e!=null?e.Name:null)" Immediate="true"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" ShowProgressIndicator="true">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </MudAutocomplete>
                    <MudText>Name: </MudText>
                    <MudTextField @bind-Value="@review.Name" />

                    <MudText>Rating: </MudText>
                    <MudRating @bind-SelectedValue="@review.Rating.Grade" MaxValue="10" />

                    <MudText>Content: </MudText>
                    <MarkdownEditor Theme="easymde" @bind-Value="@review.Content" />

                    <MudButton Color="Color.Surface" StartIcon="@Icons.Material.Filled.Save" FullWidth="false" ButtonType="ButtonType.Submit">Save</MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    [Parameter]
    public string? ReviewId { get; set; }
    private Review review = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetReview();
    }
    private async Task SetReview()
    {
        if (ReviewId!=null)
        {
            Guid reviewGuid;
            if (Guid.TryParse(ReviewId, out reviewGuid))
            {
                Review? found = await reviewService.GetById(reviewGuid);
                if (found == null) return;
               // Rating? rating = await ratingService.GetById(review.RatingId);
                //if (rating == null) return;
                review = found;
            }
        }
    }
    private async Task<IEnumerable<MediaPiece>> SearchMediaPieces(string value, CancellationToken token)
    {
        IEnumerable<MediaPiece> result = await mediaService.Search(value, token);
        return result;
    }

    private async Task SubmitValidForm()
    {
        snackBar.Add("Review created!");
        review.RatingId = await ratingService.SaveRating(review.Rating);
        Guid reviewId = await reviewService.SaveReview(review);
    }
}

<style>
    .editor-toolbar button.active, .editor-toolbar button:hover {
        border-color: #95a5a6;
        background: none;
    }

    .CodeMirror {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .editor-preview {
        background: var(--mud-palette-surface);
    }

</style>