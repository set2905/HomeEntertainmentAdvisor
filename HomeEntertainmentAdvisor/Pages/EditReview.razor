@page "/Review/Edit/{ReviewId}"
@page "/Review/Edit"
@using Blazored.FluentValidation
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Pages.Shared
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using Markdig.Syntax.Inlines;
@using Microsoft.AspNetCore.Identity;
@inject IReviewService reviewService
@inject IMediaService mediaService
@inject IRatingService ratingService
@inject ITagService tagService

@inject ISnackbar snackBar
@inject NavigationManager navManager
@inject IStringLocalizer<EditReview> localizer


@attribute [Authorize]
@attribute [Authorize(Policy = "IsNotBlocked")]
<PageTitle>@localizer["pagename"]</PageTitle>

<EditForm Model="@review" OnValidSubmit="@SubmitValidForm">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudGrid Justify="Justify.Center">
        <MudItem md="10" xs="12">
            <MudPaper Class="pa-4">
                <MudStack>
                    <MudText Typo="Typo.h4">@localizer["pagename"]</MudText>
                    <MudText>@localizer["tags"]: </MudText>
                    <MudAutocomplete @ref=@tagAutocomplete T="string" @bind-Value="tagInputValue" SearchFunc="@tagService.SearchByName" Immediate="true"
                                     ResetValueOnEmptyText="false"
                                     CoerceText="false" CoerceValue="true"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                     OnBlur="@AddTag" />
                    <MudChipSet AllClosable="true" OnClose="HandleTagRemoved">
                        @foreach (string t in tags)
                        {
                            <MudChip Value="@t" Text="@t"></MudChip>
                        }
                    </MudChipSet>
                    <MudText>@localizer["media"]: </MudText>
                    <MudAutocomplete T="MediaPiece" @bind-Value="review.Rating.MediaPiece" SearchFuncWithCancel="@SearchMediaPieces"
                                     ToStringFunc="@(e=> e!=null?e.Name:null)" Immediate="true"
                                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" ShowProgressIndicator="true">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="Size.Small" Indeterminate="true" />
                        </ProgressIndicatorTemplate>
                    </MudAutocomplete>
                    <AddMediaPieceControl />
                    <MudText>@localizer["reviewname"]: </MudText>
                    <MudTextField @bind-Value="@review.Name" />

                    <MudText>@localizer["grade"]: </MudText>
                    <MudRating @bind-SelectedValue="@review.Rating.Grade" MaxValue="10" />

                    <MudText>@localizer["content"]: </MudText>
                    <MarkdownEditor Theme="easymde" @bind-Value="@review.Content" />
                    <MudText>@localizer["images"]: </MudText>

                    <ReviewImageUploadComponent @ref="@imageUpload" Review="@review" />

                    <MudButton Color="Color.Surface" StartIcon="@Icons.Material.Filled.Save" FullWidth="false" ButtonType="ButtonType.Submit">@localizer["publish"]</MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    [Parameter]
    public string? ReviewId { get; set; }
    private Review review = new();
    private List<string> tags = new();
    private string tagInputValue = string.Empty;
    private ReviewImageUploadComponent imageUpload = new();
    private MudAutocomplete<string> tagAutocomplete = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetReview();
    }
    private async Task SetReview()
    {
        if (ReviewId!=null)
        {
            Guid reviewGuid;
            if (Guid.TryParse(ReviewId, out reviewGuid))
            {
                Review? found = await reviewService.GetById(reviewGuid);
                if (found == null)
                {
                    snackBar.Add(localizer["notfound"], Severity.Error);
                    return;
                }
                review = found;

                tags = (await tagService.GetReviewTags(reviewGuid)).Select(x => x.Name).ToList();
            }
        }
    }
    private async Task<IEnumerable<MediaPiece>> SearchMediaPieces(string value, CancellationToken token)
    {
        IEnumerable<MediaPiece> result = await mediaService.SearchMediaPieces(value, token);
        return result;
    }

    private void AddTag()
    {
        if (tagInputValue.Length != 0 && !tags.Contains(tagInputValue))
        {
            tags.Add(tagInputValue);
            tagAutocomplete.Clear();
        }
    }
    private void HandleTagRemoved(MudChip chip)
    {
        tags.Remove(chip.Text);
    }
    private async Task SubmitValidForm()
    {
        review.Status = ReviewStatus.Published;
        var saveReviewResult = await reviewService.TrySaveReview(review);
        if (!saveReviewResult.succeeded)
        {
            snackBar.Add(saveReviewResult.message, Severity.Error);
            return;
        }
        await tagService.OverwriteTags(saveReviewResult.id, tags);
        var imageUploadResults = await imageUpload.Overwrite();
        snackBar.Add(saveReviewResult.message);
        navManager.NavigateTo($"Review/{saveReviewResult.id.ToString()}");
    }
}

<style>
    .editor-toolbar button.active, .editor-toolbar button:hover {
        border-color: #95a5a6;
        background: none;
    }

    .CodeMirror {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .editor-preview {
        background: var(--mud-palette-surface);
    }

</style>