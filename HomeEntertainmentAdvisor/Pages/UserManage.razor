@page "/UserManage"
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Pages.Shared
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject IAccountService accountService;
@inject ISnackbar snackBar;

@attribute [Authorize(Roles = "admin")]
@attribute [Authorize(Policy = "IsNotBlocked")]

<PageTitle>Users</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large">
    <h1>Users</h1>
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudButton OnClick="@BlockSelected" Variant="Variant.Text" Color="Color.Surface">Block</MudButton>
            <MudIconButton OnClick="@UnblockSelected" Icon="@Icons.Material.Filled.LockReset" Color="Color.Surface" />
        </MudToolBar>
    </MudPaper>
    <MudTable T="User" Items="@users" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Bordered="true" Striped="false"
              SelectOnRowClick="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Last login</MudTh>
            <MudTh>Registration date</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate Context="user">
            <MudTd DataLabel="Id">@user.Id</MudTd>
            <MudTd DataLabel="Name">@user.UserName</MudTd>
            <MudTd DataLabel="Email">@user.Email</MudTd>
            <MudTd DataLabel="Last login">@user.LastLoginDate</MudTd>
            <MudTd DataLabel="Registration date">@user.RegistrationDate</MudTd>
            <MudTd DataLabel="Role">
                <MudSelect T="string" Disabled="@isRoleSetInProgress" MultiSelection="true" @bind-SelectedValues="@usersRoles[user]" OnClose="async ()=>await SetRoles(user)" CloseIcon="@Icons.Material.Filled.Close" AdornmentColor="Color.Tertiary">
                    @foreach (string? role in roles)
                    {
                        <MudSelectItem Value="@role" />
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Status">@(user.IsBlocked ? "Blocked" : "Active")</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
            </PagerContent>
            <FooterContent>
            </FooterContent>
        </MudTable>
    </MudContainer>
    @code
    {
    private List<User> users = new();
    private Dictionary<User, IEnumerable<string>> usersRoles = new();
    private List<string?> roles = new();
    private HashSet<User> selectedItems = new();
    private bool isRoleSetInProgress = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            users = await accountService.GetUsers() ?? new();
            roles = await accountService.GetAllRoles();
            usersRoles = new();
            foreach (User user in users)
            {
                usersRoles.Add(user, await accountService.GetUserRoles(user));
            }
            StateHasChanged();
        }
    }
    private async Task SetRoles(User user)
    {
        IEnumerable<string> roles = usersRoles[user];
        if (isRoleSetInProgress)
        {
            snackBar.Add("Role set already in progress", Severity.Error);
            return;
        }
        isRoleSetInProgress = true;
        var result = await accountService.OverwriteRoles(user.Id, roles);
        if (result.Succeeded) usersRoles[user] = roles;
        isRoleSetInProgress = false;

    }

    protected async Task BlockSelected()
    {
        await accountService.SetBlock(selectedItems.Select(x => x.Id), true);
    }

    protected async Task UnblockSelected()
    {
        await accountService.SetBlock(selectedItems.Select(x => x.Id), false);
    }
}