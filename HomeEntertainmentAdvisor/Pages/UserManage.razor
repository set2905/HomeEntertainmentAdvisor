@page "/UserManage"
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Pages.Shared
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject IAccountService accountService;
@inject ISnackbar snackBar;
@inject IStringLocalizer<UserManage> localizer;
@attribute [Authorize(Roles = "admin")]

<PageTitle>@localizer["users"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h3">@localizer["users"]</MudText>
    <MudPaper Elevation="25">
        <MudToolBar>
            <MudButton OnClick="async ()=> await SetBlockSelected(true)" Variant="Variant.Text" Color="Color.Surface">@localizer["block"]</MudButton>
            <MudIconButton Title="@localizer["blockreset"]" OnClick="async ()=> await SetBlockSelected(false)" Icon="@Icons.Material.Filled.LockReset" Color="Color.Surface" />
        </MudToolBar>
    </MudPaper>
    <MudTable T="User" Items="@users" MultiSelection="true" @bind-SelectedItems="selectedItems" Hover="true" Bordered="true" Striped="false"
              SelectOnRowClick="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>@localizer["name"]</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>@localizer["lastlogin"]</MudTh>
            <MudTh>@localizer["registerdate"]</MudTh>
            <MudTh>@localizer["role"]</MudTh>
            <MudTh>@localizer["status"]</MudTh>
        </HeaderContent>
        <RowTemplate Context="user">
            <MudTd DataLabel="Id">@user.Id</MudTd>
            <MudTd DataLabel="@localizer["name"]">@user.UserName</MudTd>
            <MudTd DataLabel="Email">@user.Email</MudTd>
            <MudTd DataLabel="@localizer["lastlogin"]">@user.LastLoginDate</MudTd>
            <MudTd DataLabel="@localizer["registerdate"]">@user.RegistrationDate</MudTd>
            <MudTd DataLabel="@localizer["role"]">
                <MudSelect T="string" Disabled="@isRoleSetInProgress" MultiSelection="true" @bind-SelectedValues="@usersRoles[user]" OnClose="async ()=>await SetRoles(user)" CloseIcon="@Icons.Material.Filled.Close" AdornmentColor="Color.Tertiary">
                    @foreach (string? role in roles)
                    {
                        <MudSelectItem Value="@role" />
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Status">@(user.IsBlocked ? localizer["blocked"] : localizer["active"])</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager HidePageNumber=true RowsPerPageString="@localizer["rowsperpage"]" PageSizeOptions="new int[]{10, 25, 50, 100}" />
            </PagerContent>
            <FooterContent>
            </FooterContent>
        </MudTable>
    </MudContainer>

    @code
    {
    private List<User> users = new();
    private Dictionary<User, IEnumerable<string>> usersRoles = new();
    private List<string?> roles = new();
    private HashSet<User> selectedItems = new();
    private bool isRoleSetInProgress = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            users = await accountService.GetUsers() ?? new();
            roles = await accountService.GetAllRoles();
            usersRoles = new();
            foreach (User user in users)
            {
                usersRoles.Add(user, await accountService.GetUserRoles(user));
            }
            StateHasChanged();
        }
    }
    private async Task SetRoles(User user)
    {
        IEnumerable<string> roles = usersRoles[user];
        if (isRoleSetInProgress)
        {
            snackBar.Add(localizer["roleinprogress"], Severity.Error);
            return;
        }
        isRoleSetInProgress = true;
        var result = await accountService.OverwriteRoles(user.Id, roles);
        if (result.Succeeded) usersRoles[user] = roles;
        else
        {
            snackBar.Add(result.Errors.First().Description, Severity.Error);
        }
        isRoleSetInProgress = false;

    }

    protected async Task SetBlockSelected(bool blocked)
    {
        IEnumerable<string> selected = selectedItems.Select(x => x.Id);
        if (await accountService.SetBlock(selected, blocked))
        {
            snackBar.Add($"{selected.Count()} {localizer["usersblocked"]}");
        }
        else
        {
            snackBar.Add($"{selected.Count()} {localizer["usersnotblocked"]}", Severity.Error);
        }
    }
}