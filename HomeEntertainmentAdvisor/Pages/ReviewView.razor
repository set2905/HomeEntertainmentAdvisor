@page "/Review/{ReviewId}"
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Pages.Shared
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using Markdig.Syntax.Inlines;
@inject IReviewService reviewService
@inject IMediaService mediaService
@inject IRatingService ratingService
@inject IImageService imageService;
@inject AuthenticationStateProvider authenticationStateProvider

@inject ISnackbar snackBar

<PageTitle>Review</PageTitle>
<MediaName Media="@review.Rating.MediaPiece" />
<MudStack Row="true">
    <MudText Typo="Typo.h2">
        @review.Name
    </MudText>
    <AuthorizeView Roles="admin">
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" Href="@GetEditHref(review)" />
    </AuthorizeView>
    </MudStack>

<MudMarkdown Value="@review.Content"
             Styling="Styling"
             TableCellMinWidth="100"
             CodeBlockTheme="CodeBlockTheme.DraculaBase16" />
<ReviewImageCarousel Images="@images" />
<AuthorName UserId="@authorId" Typo="Typo.overline" />

<LikeButton @ref=@likeButton Review="@review" UserId="@currentUserId" />
<MediaRate Media="@review.Rating.MediaPiece" UserId="@currentUserId" />

<CommentSection Review="@review" />
@code
{
    [Parameter]
    public string ReviewId { get; set; } = string.Empty;
    private Review review = new();
    private string authorId = string.Empty;
    private string? currentUserId;
    private LikeButton likeButton = new();

    private MudMarkdownStyling Styling { get; } = new();
    private List<ReviewImage> images = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var user = (await authenticationStateProvider.GetAuthenticationStateAsync()).User;
            if (user!=null)
                currentUserId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            await SetReview();
        }
    }
    private async Task SetReview()
    {
        if (ReviewId.Length!=0 && review.Id==default)
        {
            Guid reviewGuid;
            if (Guid.TryParse(ReviewId, out reviewGuid))
            {
                Review? found = await reviewService.GetById(reviewGuid);
                if (found == null)
                {
                    snackBar.Add("Review not found!", Severity.Error);
                    return;
                }
                review = found;
                if (review.Rating.AuthorId!=null)
                    authorId = review.Rating.AuthorId;
                images = await imageService.GetImagesForReview(reviewGuid);

                StateHasChanged();
            }
        }
    }
    private string GetEditHref(Review context)
    {
        return $"Review/Edit/{context.Id}";
    }

}