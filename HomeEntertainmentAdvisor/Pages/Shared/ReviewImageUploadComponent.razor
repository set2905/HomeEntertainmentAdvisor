@using CloudinaryDotNet.Actions;
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using System.Text;
@inject IImageService imageService;
@inject ISnackbar snackBar;
@inject IStringLocalizer<ReviewImageUploadComponent> localizer
<MudChipSet>
    @foreach (IBrowserFile file in allFiles)
    {
        <MudChip Color="Color.Dark" Text="@file.Name" Value="@file" OnClose="@HandleFileChipRemoved" />
    }
</MudChipSet>
<MudFileUpload Accept=".jpg,.png,.jpeg" T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
@ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
    <ButtonTemplate>
        <MudPaper Height="300px" Outlined="true" Class="@DragClass">
            <MudText Typo="Typo.h6">@localizer["draghint"]</MudText>
            @foreach (var img in existingImages)
            {
                <MudImage Height="100" Src="@img.Url" />
            }
        </MudPaper>
    </ButtonTemplate>
</MudFileUpload>
<MudToolBar DisableGutters="true" Class="gap-4">
    <MudButton OnClick="Clear" Disabled="@(!allFiles.Any()&&!existingImages.Any())" Color="Color.Error" Variant="Variant.Filled">@localizer["clear"]</MudButton>
</MudToolBar>
@code {
    [Parameter]
    public Review Review { get; set; } = new();
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> allFiles = new();
    private List<ReviewImage> existingImages = new();
    private List<ReviewImage> imagesToDelete = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        existingImages = await imageService.GetImagesForReview(Review.Id);
    }
    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        if (allFiles.Count() + files.Count()+existingImages.Count() > ReviewImage.MAXIMAGES_PERREVIEW)
        {
            snackBar.Add($"You cannot upload more than {ReviewImage.MAXIMAGES_PERREVIEW} files", Severity.Error);
            return;
        }
        if (files.Any(x => x.Size>ReviewImage.MAXIMAGESISZE))
        {
            snackBar.Add($"Maximum file size is {ReviewImage.MAXIMAGESISZE/1024}KB", Severity.Error);
            return;
        }
        foreach (IBrowserFile file in files)
        {
            this.allFiles.Add(file);
        }
    }
    private async Task Clear()
    {
        allFiles.Clear();
        imagesToDelete = new(existingImages);
        existingImages.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    public async Task<IEnumerable<ImageUploadResult>> Overwrite()
    {
        if (Review.Id == default) return Enumerable.Empty<ImageUploadResult>();
        await DeleteImages();
        IEnumerable<ImageUploadResult> uploadedImageResults = await Task.WhenAll(allFiles.Select(x => imageService.UploadImage(x, Review.Id)));
        int uploadedCount = uploadedImageResults.Where(x => x.StatusCode == System.Net.HttpStatusCode.OK).Count();
        if (uploadedCount>0)
            snackBar.Add($"{uploadedCount} images uploaded!");
        return uploadedImageResults;
    }
    private async Task DeleteImages()
    {
        var deleteImagesResults = await Task.WhenAll(imagesToDelete.Select(x => imageService.RemoveImage(x)));
    }
    private void HandleFileChipRemoved(MudChip chip)
    {
        allFiles.Remove((IBrowserFile)chip.Value);
        StateHasChanged();
    }
    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
