@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject ITagService tagService;
@inject IImageService imageService;

<MudContainer Class="my-4">
    <MudStack Class="pa-2" Row="true">
        @if (imageSrc.Length > 0)
        {
            <MudLink Href="@href">
                <MudPaper Class="d-none d-sm-flex" Width="192px" Height="108px" Elevation="0" Outlined=false>
                    <MudImage Width="192" Height="108" Class="rounded-lg d-none d-sm-block" ObjectFit="ObjectFit.Cover" Src="@imageSrc" />
                </MudPaper>
            </MudLink>
        }
        else
        {
            <MudLink Href="@href">
                <MudPaper Class="d-none d-sm-flex justify-center align-center flex-nowrap" Outlined=true MinHeight="108px" MinWidth="192px" Height="108px" Width="192px">
                    <MudIcon Color="Color.Surface" Size="Size.Large" Icon="@Icons.Material.Filled.ImageNotSupported" />
                </MudPaper>
            </MudLink>
        }
        <MudStack Class="mud-width-full align-items-start overflow-hidden" Style="max-width: 550px;" Justify="Justify.SpaceBetween">
            <MudLink Underline="Underline.None" Href="@href" Class="d-none d-sm-block text-truncate overflow-hidden" Color="Color.Surface" Typo="Typo.h5">
                @Review.Name
            </MudLink>
            <MudLink Underline="Underline.None" Href="@href" Class="d-sm-none text-truncate overflow-hidden"  Color="Color.Surface" Typo="Typo.h6">
                @Review.Name
            </MudLink>

            <MudStack Row="true">
                <MudRating Size="Size.Small" MaxValue="@Rating.MAX_RATING" ReadOnly="true" SelectedValue="@Review.Rating.Grade" />
                <MudText Typo="Typo.overline">
                    @gradeText
                </MudText>
            </MudStack>
            <MediaName Media="@media" Typo="Typo.overline" />

            <MudStack Style="width:100%;" Row="true" Justify="Justify.FlexStart">
                <MudText>
                    @Review.CachedLikes
                </MudText>
                <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Small" />
                <MudText Typo="Typo.overline" Class="d-none d-sm-block text-truncate">
                    @if (Review.Rating.Author!=null)
                        @Review.Rating.Author.UserName
                    </MudText>
                </MudStack>
            </MudStack>
            @if (tagsLoaded)
        {
            <MudContainer Class="d-none d-lg-flex" Style="width:200px">
                <MudChipSet Class="d-none d-lg-flex flex-column align-items-end" ReadOnly="true">
                    @foreach (var tag in tags)
                    {
                        <MudChip Variant="Variant.Filled" Label="true" Class="mx-1 overflow-hidden" Text="@tag.Name" />
                    }
                </MudChipSet>
            </MudContainer>
        }
        else
        {
            <MudSkeleton Class="d-none d-md-flex" Width="30%" Height="100px" Animation="Animation.Wave" />
        }

    </MudStack>

    <MudDivider />
</MudContainer>

@code
{

    [Parameter]
    public Review Review { get; set; } = new();
    private MediaPiece media = new();
    private const int TAGCOUNT = 3;
    private MudMarkdownStyling Styling { get; } = new();
    private string gradeText { get => $"{Review.Rating.Grade}/{Rating.MAX_RATING}"; }
    private List<Tag> tags = new();
    private bool tagsLoaded = false;
    private string imageSrc = string.Empty;
    string href => $"Review/{Review.Id.ToString()}";
    protected override async Task OnParametersSetAsync()
    {
        tagsLoaded = false;
        await base.OnParametersSetAsync();
        tags = await tagService.GetReviewTags(Review.Id, TAGCOUNT);
        tagsLoaded = true;
        media = Review.Rating.MediaPiece;
        imageSrc = await imageService.GetFirstImageUrl(Review.Id)??string.Empty;
    }

}
