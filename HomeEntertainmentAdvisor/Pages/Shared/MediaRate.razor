@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;

@inject IRatingService ratingService;
@inject ISnackbar snackBar;
<AuthorizeView>
    <MudButton OnClick="OpenDialog" StartIcon="@Icons.Material.Filled.StarRate" Variant="Variant.Filled" Color="Color.Primary">
        Rate @Media.Name
    </MudButton>
    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                Rate @Media.Name
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudRating @bind-SelectedValue="grade" MaxValue="@MAX_USER_RATING" Class="mt-3" />
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Save rating</MudButton>
        </DialogActions>
    </MudDialog>
</AuthorizeView>

@code {
    [Parameter]
    public MediaPiece Media { get; set; } = new();
    [Parameter]
    public string UserId { get; set; }=string.Empty;
    private bool visible;
    private int grade;
    private void OpenDialog() => visible = true;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    private const int MAX_USER_RATING = 5;
    private const int MIN_USER_RATING = 1;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Media.Id == default) return;
        Rating? existing = await ratingService.GetByMedia(Media, UserId);
        if (existing != null)
            grade = ConvertFromReviewRating(existing.Grade);
        StateHasChanged();
    }
    private async Task Submit()
    {
        if (Media.Id==default||grade < MIN_USER_RATING) return;
        visible = false;
        Rating rating = new()
            {
                MediaPieceId = Media.Id,
                Grade = ConvertFromUserRating(grade)
            };
        Guid savedId = await ratingService.SaveRating(rating, UserId);
        if (savedId != default)
            snackBar.Add($"{Media.Name} rated succesfully", Severity.Success);
        else
            snackBar.Add($"{Media.Name} couldnt be rated", Severity.Error);

    }
    private int ConvertFromUserRating(int grade)
    {
        return (int)Math.Floor((double)grade * (Rating.MAX_RATING / MAX_USER_RATING));
    }
    private int ConvertFromReviewRating(int grade)
    {
        return (int)Math.Floor((double)grade * (MAX_USER_RATING/Rating.MAX_RATING));
    }
}
