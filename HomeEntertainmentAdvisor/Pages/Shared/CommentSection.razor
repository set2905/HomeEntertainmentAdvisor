@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@inject IReviewCommentsService commentService;
@inject IStringLocalizer<CommentSection> localizer;
@implements IAsyncDisposable

<MudPaper Class="pa-6 d-flex flex-column">

    <MudText Typo="Typo.h6">
        @localizer["comments"]
    </MudText>
    <AuthorizeView>
        <MudTextField Class="my-2" @bind-Value="commentFieldValue" Label="" Variant="Variant.Outlined" MaxLength="Comment.MAX_LENGTH"></MudTextField>
        <MudButton Class="align-self-end" Variant="Variant.Filled" OnClick="@AddComment">
            @localizer["leavecomment"]
        </MudButton>
    </AuthorizeView>
    @if (comments.Count>0)
    {
        foreach (Comment comment in comments)
        {
            <MudContainer Class="mt-1 mb-5 mx-0 px-0">
                <MudStack Class="py-0 my-0" Row=true>
                    <MudText Typo="Typo.overline">
                        @comment.Author.UserName
                    </MudText>
                    <MudText Typo="Typo.subtitle1">
                        @comment.CreatedDate.ToString("dd.MM.yy HH:mm")
                    </MudText>
                </MudStack>
                <MudText Typo="Typo.body1">
                    @comment.Content
                </MudText>
            </MudContainer>
        }
        <MudButton Class="mud-width-full" Disabled="@loadMoreCommentsButtonDisabled" OnClick="()=>LoadMoreComments()">
            @localizer["loadmore"]
        </MudButton>

    }
    else
    {
        <MudText Typo=Typo.h6 Align="Align.Center" Class="my-6">
            @localizer["empty"]
        </MudText>
    }
</MudPaper>

@code {
    [Parameter]
    public Review Review { get; set; } = new();
    private List<Comment> comments = new();
    private string commentFieldValue = string.Empty;
    private int currentPage = 0;
    private int perPage = 10;

    private bool loadMoreCommentsButtonDisabled = false;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        hubConnection = new HubConnectionBuilder()
    .WithUrl(Navigation.ToAbsoluteUri("/commenthub"))
    .Build();

        hubConnection.On<Comment>("RecieveComment", (comment) =>
        {
            if (comment.ReviewId != default && comment.ReviewId == Review.Id)
            {
                comments.Insert(0, comment);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await InitComments();
    }

    private async Task LoadMoreComments()
    {
        currentPage++;
        List<Comment> loaded = await commentService.GetPage(Review.Id, currentPage, perPage);
        if (loaded.Count == 0)
            loadMoreCommentsButtonDisabled = true;
        comments.AddRange(loaded);
        comments = comments.Distinct(new CommentComparer()).ToList();
        StateHasChanged();

    }
    private async Task Send(Comment comment)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendComment", comment);
        }
    }
    private async Task InitComments()
    {
        if (Review == null||Review.Id==default) return;

        comments = await commentService.GetPage(Review.Id, currentPage, perPage);
        StateHasChanged();
    }
    private async Task AddComment()
    {
        if (commentFieldValue.Length == 0) return;
        Guid addedCommentId = await commentService.AddComment(commentFieldValue, Review.Id);
        Comment? comment = await commentService.GetById(addedCommentId);
        if (comment!=null)
            await Send(comment);
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
