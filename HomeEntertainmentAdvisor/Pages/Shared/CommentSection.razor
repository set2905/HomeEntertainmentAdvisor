@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@inject IReviewCommentsService commentService;

@implements IAsyncDisposable
<MudPaper Class="pa-6">
    <AuthorizeView>
        <MudTextField @bind-Value="commentFieldValue" Label="Standard" Variant="Variant.Text" MaxLength="Comment.MAX_LENGTH"></MudTextField>
        <MudButton OnClick="@AddComment">
            Leave comment
        </MudButton>
    </AuthorizeView>
    @if (comments.Count>0)
    {
        foreach (Comment comment in comments)
        {
            <MudText Typo="Typo.h6">
                @comment.Author.UserName
            </MudText>
            <MudText>
                @comment.CreatedDate.ToString("dd.MM.yy HH:mm")
            </MudText>

            <MudText>
                @comment.Content
            </MudText>
        }
    }
    else
    {
        <MudText>
            There is no comments
        </MudText>
    }
</MudPaper>

@code {
    [Parameter]
    public Review Review { get; set; } = new();
    private List<Comment> comments = new();
    private string commentFieldValue = string.Empty;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        hubConnection = new HubConnectionBuilder()
    .WithUrl(Navigation.ToAbsoluteUri("/commenthub"))
    .Build();

        hubConnection.On<Comment>("RecieveComment", (comment) =>
        {
            if (comment.ReviewId != default && comment.ReviewId == Review.Id)
            {
                comments.Add(comment);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await SetComments();
    }
    private async Task Send(Comment comment)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendComment", comment);
        }
    }
    private async Task SetComments()
    {
        if (Review == null||Review.Id==default) return;

        comments = await commentService.GetCommentPage(Review.Id);
        StateHasChanged();
    }
    private async Task AddComment()
    {
        if (commentFieldValue.Length == 0) return;
        Guid addedCommentId = await commentService.AddComment(commentFieldValue, Review.Id);
        Comment? comment = await commentService.GetById(addedCommentId);
        if (comment!=null)
            await Send(comment);
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
