@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject IReviewService reviewService
@inject ISnackbar snackBar
@inject IStringLocalizer<ReviewsTable> localizer

<MudTable Items="@Reviews" Filter="new Func<Review,bool>(FilterFunc1)" Hover="true" Bordered="true" Striped="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@localizer["title"]</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="@localizer["search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>№</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Name)">
                @localizer["name"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Review, object>(x=>x.CachedLikes)">
                @localizer["likes"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Review, object>(x=>x.Status)">
                @localizer["status"]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @localizer["actions"]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="№">@Reviews.IndexOf(context)</MudTd>
        <MudTd DataLabel="@localizer["name"]">
            <MudText>
                @context.Name
            </MudText>
        </MudTd>
        <MudTd DataLabel="@localizer["likes"]">@context.CachedLikes</MudTd>
        <MudTd DataLabel="@localizer["status"]">@localizer[context.Status.ToString()]</MudTd>
        <MudTd DataLabel="@localizer["actions"]" Class="justify-start">
            <MudIconButton Class="mr-4" Size="Size.Small" Title="@localizer["view"]" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Surface" Href="@GetHref(context)" />
            <MudIconButton Class="mr-4" Size="Size.Small" Title="@localizer["edit"]" Icon="@Icons.Material.Filled.Edit" Color="Color.Surface" Href="@GetEditHref(context)" />
            <MudIconButton Size="Size.Small" Title="@localizer["delete"]" OnClick="()=>HandleDeleteReviewClicked(context)" Icon="@GetDeleteIconButton(context)" Color="Color.Surface" />
        </MudTd>
    </RowTemplate>
</MudTable>
@code {
    [Parameter]
    public List<Review> Reviews { get; set; } = new();
    private string searchString1 = "";

    private string GetDeleteIconButton(Review context)
    {
        if (context.Status == ReviewStatus.Deleted) return Icons.Material.Filled.Restore;
        return Icons.Material.Filled.Delete;
    }
    private string GetHref(Review context)
    {
        return $"Review/{context.Id}";
    }
    private string GetEditHref(Review context)
    {
        return $"Review/Edit/{context.Id}";
    }
    private async Task HandleDeleteReviewClicked(Review review)
    {
        if (review.Status != ReviewStatus.Deleted)
        {
            if (await reviewService.SetStatus(review, ReviewStatus.Deleted))
                snackBar.Add($"{review.Name} {localizer["deletedsuccess"]}!");
            else
                snackBar.Add($"{review.Name} {localizer["notdeleted"]}!", Severity.Error);
        }
        else
        {
            if (await reviewService.SetStatus(review, ReviewStatus.Draft))
                snackBar.Add($"{review.Name} {localizer["restored"]}!");
            else
            {
                snackBar.Add($"{review.Name} {localizer["notrestored"]}!", Severity.Error);
            }
        }
    }

    private bool FilterFunc1(Review review) => FilterFunc(review, searchString1);

    private bool FilterFunc(Review review, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (review.Name.StartsWith(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}
