@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject IReviewLikeService likeService
@inject ISnackbar snackBar
@inject IReviewService reviewService

@implements IDisposable
<MudText Typo="Typo.h6">
    Was this review helpful?
</MudText>
<MudButton EndIcon="@Icons.Material.Filled.ThumbUp" IconColor="@likeButtonColor" OnClick="HandleLikeClicked">
    @likeCount
</MudButton>
@code {
    [Parameter]
    public Review? Review { get; set; }
    [Parameter]
    public string UserId { get; set; } = string.Empty;
    private int likeCount;
    private Color likeButtonColor = Color.Surface;
    private bool liked = false;
    private CancellationTokenSource likeCancellationTokenSource = new();


    protected override async Task OnParametersSetAsync()
    {
        await SetLikes();
    }
    private async Task HandleLikeClicked()
    {
        if (Review == null) return;
        CancelAndResetLikeToken();
        if (!liked)
        {
            if (!await likeService.LikeReview(Review.Id, UserId, likeCancellationTokenSource.Token))
                snackBar.Add("Like couldnt be added");
            else
            {
                likeButtonColor = Color.Success;
                liked = true;
            }

        }
        else
        {
            if (!await likeService.RemoveLikeReview(Review.Id, UserId, likeCancellationTokenSource.Token))
                snackBar.Add("Like couldnt be removed");
            else
            {
                likeButtonColor = Color.Surface;
                liked = false;
            }

        }
        StateHasChanged();

    }
    private async Task SetLikes()
    {
        if (Review == null||Review.Id==default) return;

        if (await likeService.IsLikedByUser(Review, UserId))
        {
            liked = true;
            likeButtonColor = Color.Success;
        }
        else
        {
            liked = false;
            likeButtonColor = Color.Surface;
        }
        likeCount = await likeService.TryUpdateReviewLikeCount(Review);
        StateHasChanged();
    }

    private void CancelAndResetLikeToken()
    {
        likeCancellationTokenSource.Cancel();
        likeCancellationTokenSource.Dispose();
        likeCancellationTokenSource = new CancellationTokenSource();
    }
    #region IDisposable
    public void Dispose()
    {
        likeCancellationTokenSource.Cancel();
        likeCancellationTokenSource.Dispose();
    }
    #endregion
}
