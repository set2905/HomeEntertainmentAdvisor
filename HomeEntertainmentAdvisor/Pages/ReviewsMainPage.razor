@page "/"
@using HomeEntertainmentAdvisor.Models;
@using HomeEntertainmentAdvisor.Pages.Shared
@using HomeEntertainmentAdvisor.Services.Interfaces;
@inject IReviewService reviewService
@inject ITagService tagService
@inject IStringLocalizer<ReviewsMainPage> localizer
@implements IDisposable
<PageTitle>@localizer["pagename"]</PageTitle>
<MudGrid Justify="Justify.Center">
    @if (isLoading)
    {
        <MudProgressLinear Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudItem xs="12" md="10">
            <MudChipSet MultiSelection SelectedChipsChanged="HandleTagSelectionChanged">
                @foreach (var tag in tags)
                {
                    <MudChip CloseIcon="" Text="@tag.Name" Value="@tag" />
                }
            </MudChipSet>
            <MudTabs Outlined="true" Position="Position.Top" Rounded="false" Border="true"
                     ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                <MudTabPanel Icon="fas fa-certificate" Text="@localizer["newest"]">
                    <ReviewList Reviews="@newest" />
                    @if (newest.Count()!=0)
                    {
                        <MudButton Class="mud-width-full" Disabled="@loadMoreNewestButtonDisabled" OnClick="()=>LoadMoreNewest()">@localizer["loadmore"]</MudButton>
                    }
                </MudTabPanel>
                <MudTabPanel Icon="fas fa-up-long" Text="@localizer["best"]">
                    <ReviewList Reviews="@top" />
                    @if (top.Count()!=0)
                    {
                        <MudButton Class="mud-width-full" Disabled="@loadMoreTopButtonDisabled" OnClick="()=>LoadMoreTop()">@localizer["loadmore"]</MudButton>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    }
</MudGrid>
@code
{
    private int perPage = 10;
    private int currentNewestPage = 0;
    private int currentTopPage = 0;
    private List<Review> newest = new();
    private List<Review> top = new();
    private List<Tag> tags = new();
    private List<Tag> selectedTags = new();
    private bool loadMoreNewestButtonDisabled = false;
    private bool loadMoreTopButtonDisabled = false;
    private bool isLoading = true;

    private CancellationTokenSource tagFilterCancellationTokenSrc = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            newest = await reviewService.GetPage(currentNewestPage, perPage, order: Domain.Repo.ReviewOrder.Date);
            top = await reviewService.GetPage(currentTopPage, perPage, order: Domain.Repo.ReviewOrder.Likes);
            tags = await tagService.GetTags();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleTagSelectionChanged(MudChip[] chips)
    {
        CancelAndResetTagFilterToken();
        selectedTags = chips.Select(x => (Tag)x.Value).ToList();
        ResetPages();
        Task<List<Review>> getNewestTask = reviewService.GetPage(currentNewestPage, perPage, order: Domain.Repo.ReviewOrder.Date, tags: selectedTags, cancellationToken: tagFilterCancellationTokenSrc.Token);
        Task<List<Review>> getTopTask = reviewService.GetPage(currentTopPage, perPage, order: Domain.Repo.ReviewOrder.Likes, tags: selectedTags, cancellationToken: tagFilterCancellationTokenSrc.Token);
        List<Review>[] results = await Task.WhenAll(getNewestTask, getTopTask);
        if (!getNewestTask.IsCanceled&&!getTopTask.IsCanceled)
        {
            newest = results[0];
            top = results[1];
            StateHasChanged();
        }
    }
    private void ResetPages()
    {
        currentNewestPage = 0;
        currentTopPage = 0;
        loadMoreTopButtonDisabled = false;
        loadMoreNewestButtonDisabled = false;
    }
    private void CancelAndResetTagFilterToken()
    {
        tagFilterCancellationTokenSrc.Cancel();
        tagFilterCancellationTokenSrc.Dispose();
        tagFilterCancellationTokenSrc = new();
    }
    private async Task LoadMoreTop()
    {
        currentTopPage++;
        List<Review> loaded = await reviewService.GetPage(currentTopPage, perPage, order: Domain.Repo.ReviewOrder.Likes, tags: selectedTags);
        if (loaded.Count == 0)
            loadMoreTopButtonDisabled = true;
        top.AddRange(loaded);
        StateHasChanged();
    }
    private async Task LoadMoreNewest()
    {
        currentNewestPage++;
        List<Review> loaded = await reviewService.GetPage(currentNewestPage, perPage, order: Domain.Repo.ReviewOrder.Date, tags: selectedTags);
        if (loaded.Count == 0)
            loadMoreNewestButtonDisabled = true;
        newest.AddRange(loaded);
        StateHasChanged();
    }
    #region IDisposable
    public void Dispose()
    {
        tagFilterCancellationTokenSrc.Cancel();
        tagFilterCancellationTokenSrc.Dispose();
    }
    #endregion
}