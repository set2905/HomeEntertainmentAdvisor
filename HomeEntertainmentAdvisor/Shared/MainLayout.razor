@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <CultureSelector />
        <MudSwitch Checked="@_isDarkMode" CheckedChanged="HandleThemeChanged" Color="Color.Primary" Class="ma-4" T="bool" Label="Light/Dark" />
        <MudSpacer />

        <LoginDisplay />

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MudBlazorTest</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudSwitch<bool> themeSwitch;
    private MudTheme _theme = new();
    private bool _isDarkMode;

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    public async Task HandleThemeChanged(bool value)
    {
        _isDarkMode=value;
        await localStorage.SetItemAsync("darkTheme", value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var darkThemeCookieValue = await localStorage.GetItemAsync<bool>("darkTheme");
        _isDarkMode = darkThemeCookieValue;
        StateHasChanged();

    }
}