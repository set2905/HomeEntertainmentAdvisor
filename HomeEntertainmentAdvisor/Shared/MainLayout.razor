@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject IStringLocalizer<MainLayout> localizer
<MudThemeProvider @bind-IsDarkMode="@isDarkMode" Theme="theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar WrapContent="false" Dense="false" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudContainer MaxWidth="MaxWidth.ExtraSmall">
            <MudTextField Class="searchfield" AdornmentColor="Color.Success" Margin="Margin.Dense" @bind-Value="Search" Variant="Variant.Text" InputType="InputType.Text" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="HandleSearchClicked" />
        </MudContainer>
        <MudSpacer />
        <MudContainer Style="width:auto" Class="d-none d-md-block">
            <LoginDisplay />
        </MudContainer>
        <MudSwitch Checked="@isDarkMode" CheckedChanged="HandleThemeChanged" Color="Color.Primary" Class="ml-4" T="bool" ThumbIcon="@Icons.Material.Filled.DarkMode" />
        <CultureSelector />
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">@localizer["menu"]</MudText>
        </MudDrawerHeader>
        <MudContainer Class="d-block d-md-none pa-0">
            <LoginDisplay />
        </MudContainer>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-0">
            <ErrorBoundary>
                @Body
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme theme = new();
    private bool isDarkMode = true;
    private bool drawerOpen = false;

    private string Search = string.Empty;
    public async Task HandleThemeChanged(bool value)
    {
        if (isDarkMode == value) return;
        await localStorage.SetItemAsync("darkTheme", value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var darkThemeCookieValue = await localStorage.GetItemAsync<bool>("darkTheme");
        isDarkMode = darkThemeCookieValue;
        StateHasChanged();
    }
    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    void HandleSearchClicked()
    {
        navManager.NavigateTo($"{Search}", true);
    }
}
<style>
    .mud-select {
        flex-grow: 0;
    }

    .mud-nav-item {
        width: auto;
    }

    .searchfield .mud-input-text {
        color: var(--mud-palette-primary-text) !important; 
    }

    .mud-success-text {
        color: var(--mud-palette-primary-text) !important;
    }
 </style>